# CI & Deploy for a static site on GitHub Pages
# - On PR to main: run checks only (no deploy)
# - On push to main: run checks, then deploy to GitHub Pages

name: CI & Deploy (GitHub Pages)

on:
  pull_request:
    branches: [ main ]        # Run checks for PRs targeting main
  push:
    branches: [ main ]        # Deploy only when code is pushed/merged to main

permissions:
  contents: read              # Required to checkout code
  pages: write                # Required to publish to GitHub Pages
  id-token: write             # Required for OIDC token during deploy

# Ensure only one Pages deploy runs at a time
concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  test:
    name: Checks (HTML / Links / Lighthouse)
    runs-on: ubuntu-latest

    steps:
      # 1) Get repository contents
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Setup Node for CLI tools used below
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # 3) Basic HTML lint (will WARN if no config; you can add a .htmlhintrc later)
      #    We convert failures to a soft warning so your first run doesn't hard-fail.
      - name: HTMLHint (basic syntax)
        run: |
          npx --yes htmlhint "**/*.html" || \
          (echo "HTMLHint found issues or no config present. Convert to warning for now."; exit 0)

      # 4) Broken links check (find 404s). External sites may timeout; adjust args as needed.
      - name: Broken links (lychee)
        uses: lycheeverse/lychee-action@v1
        with:
          # --exclude-mail: skip mailto: links
          # --timeout 20s : fail fast on slow externals
          # You can add --exclude <pattern> to ignore specific hosts/paths
          args: --no-progress --verbose --exclude-mail --timeout 20s .
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 5) Lighthouse audit for performance/accessibility/SEO (against static files)
      #    This gives a quick score to catch regressions; not a strict gate by default.
      - name: Lighthouse CI (static)
        uses: treosh/lighthouse-ci-action@v11
        with:
          configPath: |
            {
              "ci": {
                "collect": { "staticDistDir": ".", "numberOfRuns": 1 },
                "assert": {
                  "assertions": {
                    "categories:performance": ["warn", { "minScore": 0.60 }],
                    "categories:accessibility": ["warn", { "minScore": 0.70 }]
                  }
                }
              }
            }

  build:
    # Only build when pushing to main, and only after tests passed
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: test
    runs-on: ubuntu-latest
    name: Upload static artifact

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # If you use a build tool (e.g., Vite/React), run it here and change path to ./dist
      # - run: npm ci && npm run build

      - name: Setup Pages
        uses: actions/configure-pages@v5

      # For a pure static site (index.html at repo root), upload the root directory.
      # If you build to ./dist, set 'path: dist' instead.
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: .

  deploy:
    # Publish to GitHub Pages after the artifact is prepared
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
